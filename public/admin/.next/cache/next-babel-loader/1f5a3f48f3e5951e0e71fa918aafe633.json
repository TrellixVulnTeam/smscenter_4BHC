{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/admin/Header';\nimport Footer from '../components/admin/Footer';\nimport swal from \"sweetalert\";\nimport cookie from 'js-cookie';\nimport { useDispatch, connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nfunction mapStateToProps(state) {\n  return {\n    adminReducer: state.adminReducer\n  };\n}\n\nconst AdminUsers = ({\n  adminReducer\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: edit,\n    1: setEdit\n  } = useState('');\n  const {\n    0: userDate,\n    1: setUserDate\n  } = useState({\n    id: null,\n    name: null,\n    email: null,\n    role_id: null\n  });\n  const {\n    0: newUser,\n    1: setNewUser\n  } = useState({\n    name: null,\n    email: null,\n    password: 'icredit123',\n    role_id: 2\n  });\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(false);\n  const finalUser = users.filter(user => user.id !== adminReducer.user.id);\n\n  const handleClose = () => {\n    setShowModal(false);\n    setNewUser({\n      name: null,\n      email: null,\n      password: 'icredit123',\n      role_id: 2\n    });\n  };\n\n  const handleShow = () => setShowModal(true);\n\n  const getUser = () => {\n    axios.get(`${process.env.BASE_URL}/users`, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      setUsers(res.data);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []);\n\n  const editAccount = id => {\n    setEdit(id);\n    const user = users.filter(user => user.id === id);\n    setUserDate({\n      id: id,\n      name: user[0].name,\n      email: user[0].email,\n      role_id: user[0].role_id\n    });\n  };\n\n  const userAdd = e => {\n    axios.post(`${process.env.BASE_URL}/users`, {\n      name: newUser.name,\n      email: newUser.email,\n      password: newUser.password,\n      role_id: newUser.role_id,\n      token: cookie.get('admin_token')\n    }, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.data.success) {\n        dispatch({\n          type: 'ADM_SUCCESS_MESSAGE',\n          payload: res.data.message\n        });\n        getUser();\n        handleClose();\n      } else {\n        dispatch({\n          type: 'ADM_ERROR_MESSAGE',\n          payload: res.data.message\n        });\n      }\n    });\n    e.preventDefault();\n  };\n\n  const saveEdit = () => {\n    axios.put(`${process.env.BASE_URL}/edit`, {\n      token: cookie.get('admin_token'),\n      email: userDate.email,\n      name: userDate.name,\n      role_id: userDate.role_id,\n      user_id: userDate.id\n    }, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.data.success) {\n        dispatch({\n          type: 'ADM_SUCCESS_MESSAGE',\n          payload: res.data.message\n        });\n        setEdit('');\n        getUser();\n      } else {\n        dispatch({\n          type: 'ADM_ERROR_MESSAGE',\n          payload: res.data.message\n        });\n        getUser();\n      }\n    });\n  };\n\n  const deleteAccount = id => {\n    swal({\n      title: 'Вы уверены, что хотите удалить пользователя',\n      buttons: {\n        catch: {\n          text: 'Да',\n          value: 'yes'\n        },\n        cancel: 'Нет'\n      }\n    }).then(value => {\n      switch (value) {\n        case 'yes':\n          axios.get(`${process.env.BASE_URL}/deleteAccount?token=${cookie.get('admin_token')}&user_id=${id}`, {\n            headers: {\n              'Access-Control-Allow-Origin': '*'\n            }\n          }).then(response => {\n            if (response.data.success) {\n              dispatch({\n                type: 'ADM_SUCCESS_MESSAGE',\n                payload: response.data.message\n              });\n              getUser();\n            } else {\n              dispatch({\n                type: 'ADM_ERROR_MESSAGE',\n                payload: response.data.message\n              });\n            }\n          });\n      }\n    });\n  };\n\n  const cancelEdit = () => {\n    setEdit('');\n    getUser();\n  };\n\n  const userTable = (edit, user, index) => {\n    if (edit === user.id) {\n      return /*#__PURE__*/_jsxs(\"tr\", {\n        children: [/*#__PURE__*/_jsx(\"th\", {\n          scope: \"row\",\n          children: index + 1\n        }), /*#__PURE__*/_jsx(\"td\", {\n          children: /*#__PURE__*/_jsx(\"input\", {\n            onChange: e => setUserDate({\n              id: userDate.id,\n              name: e.target.value,\n              email: userDate.email,\n              role_id: userDate.role_id\n            }),\n            value: userDate.name\n          })\n        }), /*#__PURE__*/_jsx(\"td\", {\n          children: /*#__PURE__*/_jsx(\"input\", {\n            onChange: e => setUserDate({\n              id: userDate.id,\n              name: userDate.name,\n              email: e.target.value,\n              role_id: userDate.role_id\n            }),\n            value: userDate.email\n          })\n        }), /*#__PURE__*/_jsx(\"td\", {\n          children: /*#__PURE__*/_jsxs(\"select\", {\n            onChange: e => setUserDate({\n              id: userDate.id,\n              name: userDate.name,\n              email: userDate.email,\n              role_id: e.target.value\n            }),\n            value: userDate.role_id,\n            children: [/*#__PURE__*/_jsx(\"option\", {\n              value: \"1\",\n              children: \"Admin\"\n            }), /*#__PURE__*/_jsx(\"option\", {\n              value: \"2\",\n              children: \"Moderator\"\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(\"td\", {\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            className: \"btn btn-success mr-2\",\n            onClick: () => saveEdit(),\n            children: \"Save\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => cancelEdit(),\n            children: \"Cancel\"\n          })]\n        })]\n      }, userDate.id);\n    } else return /*#__PURE__*/_jsxs(\"tr\", {\n      children: [/*#__PURE__*/_jsx(\"th\", {\n        scope: \"row\",\n        children: index + 1\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: user.name\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: user.email\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: user.role_id === 1 ? 'Admin' : 'Moderator'\n      }), /*#__PURE__*/_jsxs(\"td\", {\n        children: [/*#__PURE__*/_jsx(\"button\", {\n          className: \"btn btn-success mr-2\",\n          disabled: adminReducer.user.role_id === 1 ? false : true,\n          onClick: () => editAccount(user.id),\n          children: \"Edit\"\n        }), /*#__PURE__*/_jsx(\"button\", {\n          className: \"btn btn-danger\",\n          disabled: adminReducer.user.role_id === 1 ? false : true,\n          onClick: () => deleteAccount(user.id),\n          children: \"Delete\"\n        })]\n      })]\n    }, user.id);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Header, {}), /*#__PURE__*/_jsx(\"main\", {\n      role: \"main\",\n      children: /*#__PURE__*/_jsxs(\"section\", {\n        class: \"panel important\",\n        children: [loading ? /*#__PURE__*/_jsx(\"div\", {\n          children: \"\\u0417\\u0430\\u0433\\u0443\\u0437\\u043A\\u0430...\"\n        }) : /*#__PURE__*/_jsxs(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"d-flex mb-3 justify-content-between\",\n            children: [/*#__PURE__*/_jsx(\"h2\", {\n              children: \"Users\"\n            }), /*#__PURE__*/_jsxs(\"button\", {\n              className: \"btn btn-info\",\n              onClick: handleShow,\n              disabled: adminReducer.user.role_id === 1 ? false : true,\n              children: [\"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \", /*#__PURE__*/_jsx(\"b\", {\n                children: \"+\"\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"table\", {\n            className: \"table table-striped\",\n            children: [/*#__PURE__*/_jsx(\"thead\", {\n              children: /*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"th\", {\n                  scope: \"col\",\n                  children: \"#\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  scope: \"col\",\n                  children: \"\\u0418\\u043C\\u044F\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  scope: \"col\",\n                  children: \"Username\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  scope: \"col\",\n                  children: \"\\u0420\\u043E\\u043B\\u044C\"\n                }), /*#__PURE__*/_jsx(\"th\", {\n                  scope: \"col\",\n                  children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\"\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"tbody\", {\n              children: finalUser.map((user, index) => userTable(edit, user, index))\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(Modal, {\n          isOpen: showModal,\n          toggle: () => handleClose(showModal),\n          size: \"md\",\n          children: /*#__PURE__*/_jsx(ModalBody, {\n            children: /*#__PURE__*/_jsxs(\"form\", {\n              className: \"form-group\",\n              onSubmit: e => userAdd(e),\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                onChange: e => setNewUser({\n                  password: newUser.password,\n                  name: e.target.value,\n                  email: newUser.email,\n                  role_id: newUser.role_id\n                }),\n                value: newUser.name,\n                className: \"input-group mb-2\",\n                type: \"text\",\n                placeholder: \"\\u0418\\u043C\\u044F\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                onChange: e => setNewUser({\n                  password: newUser.password,\n                  name: newUser.name,\n                  email: e.target.value,\n                  role_id: newUser.role_id\n                }),\n                value: newUser.email,\n                className: \"input-group mt-2\",\n                type: \"text\",\n                placeholder: \"Username\"\n              }), /*#__PURE__*/_jsxs(\"select\", {\n                onChange: e => setNewUser({\n                  password: newUser.password,\n                  name: newUser.name,\n                  email: newUser.email,\n                  role_id: e.target.value\n                }),\n                value: newUser.email,\n                value: newUser.role_id,\n                className: \"input-group mt-2\",\n                children: [/*#__PURE__*/_jsx(\"option\", {\n                  value: \"1\",\n                  children: \"Admin\"\n                }), /*#__PURE__*/_jsx(\"option\", {\n                  value: \"2\",\n                  children: \"Moderator\"\n                })]\n              }), /*#__PURE__*/_jsx(\"button\", {\n                className: \"btn btn-info mt-2\",\n                disabled: adminReducer.user.role_id === 1 ? false : true,\n                children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n              })]\n            })\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Footer, {})]\n  });\n};\n\nexport default connect(mapStateToProps)(AdminUsers);","map":null,"metadata":{},"sourceType":"module"}