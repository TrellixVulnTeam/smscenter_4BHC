{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../styles/globals.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport cookie from 'js-cookie';\nimport { Provider } from 'react-redux';\nimport React, { Fragment } from 'react';\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { connect } from 'react-redux';\nimport store from '../store/store';\nimport App from 'next/app';\nimport { fetchAdmin } from '../store/actions/adminActions';\n\nclass MyApp extends App {\n  componentDidMount() {\n    if (cookie.get('admin_token') !== undefined) {\n      this.props.fetchAdmin();\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    const compName = Component.name;\n    return /*#__PURE__*/_jsx(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n    });\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store;\n\nconst wrapper = createWrapper(makeStore);\n\nconst mapStateToProps = state => ({// loggedIn: state.userReducer.loggedIn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAdmin: () => dispatch(fetchAdmin())\n});\n\nMyApp = connect(mapStateToProps, mapDispatchToProps)(MyApp); // //withRedux wrapper that passes the store to the App Component\n// // export default makeStore.withRedux(MyApp);\n\nexport default wrapper.withRedux(MyApp); // export default MyApp","map":null,"metadata":{},"sourceType":"module"}